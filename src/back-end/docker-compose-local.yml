version : '3'
services:
  # Database
  db:
    container_name: mariadb_local
    image: mariadb:latest
    ports:
      - "${DB_PORT}:${DB_PORT}"
    volumes:
      - ./db/data:/var/lib/mysql
      - ./db/conf.d:/etc/mysql/conf.d
    environment:
      - MYSQL_DATABASE=${DB_NAME}
      - MYSQL_USER=${DB_USER}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_ROOT_USER=${DB_ROOT_USER}
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
      - TZ=${TZ}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${DB_HOST}:${DB_PORT}"]
      interval: 15s
      timeout: 10s
      retries: 5
    restart: on-failure
  # Database for Caching
  cache:
    container_name: redis_local
    image: redis:latest
    command: redis-server --requirepass ${CACHE_PASSWORD} --port ${CACHE_PORT}
    volumes:
      - ./cache/data:/data
    expose:
      - "${CACHE_PORT}"
    healthcheck:
      test: "redis-cli -h ${CACHE_HOST} ping"
      interval: 3s
      timeout: 1s
      retries: 5
    restart: on-failure
  # WAS
  web:
    container_name: web_local
    image: web_local
    build:
      context: .
      dockerfile : web/Dockerfile-local
      args:
        BASE: ${BASE}
        WEB: ${WEB}
        STATIC: ${STATIC}
        WEB_PORT: ${WEB_PORT}
    command: sh -c "python manage.py reset_db --noinput &&
                    python manage.py makemigrations --no-input &&
                    python manage.py migrate &&
                    python manage.py loaddata data.json &&
                    python manage.py collectstatic --no-input &&
                    python manage.py runserver 0.0.0.0:${WEB_PORT}"
    volumes:
      - ./web:${WEB}
      - ./environment:${ENV}
      - ./static:${STATIC}
    expose:
      - "${WEB_PORT}"
    environment:
      - MODULE_NAME=${MODULE_NAME}
      - VARIABLE_NAME=${VARIABLE_NAME}
      - GUNICORN_CONFIG=${GUNICORN_CONFIG}
      - SETTINGS_MODULE=${SETTINGS_MODULE}
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://${WEB_HOST}:${WEB_PORT}" ]
      interval: 1m
      timeout: 10s
      retries: 5
    restart: on-failure
    depends_on:
      - db
      - cache
      - broker
  # Reverse Proxy
  nginx:
    container_name: nginx_local
    image: nginx:stable
    volumes:
      - ./nginx:/etc/nginx/templates
      - ./static:${STATIC}
      - ./media:${MEDIA}
    environment:
      - WEB_HOST=${WEB_HOST}
      - WEB_DOCKERNAME=${WEB_DOCKERNAME}
      - WEB_PORT=${WEB_PORT}
      - STATIC_LOCATION=${STATIC_LOCATION}
      - MEDIA_LOCATION=${MEDIA_LOCATION}
      - AWS_S3_URL=${AWS_S3_URL}
    ports:
      - "80:80" # http
      - "443:443" # https
    restart: on-failure
    depends_on:
      - web
  # Message broker
  broker:
    container_name: rabbitmq_local
    image: rabbitmq:3.10.2-management-alpine
    environment:
      - RABBITMQ_DEFAULT_USER=${BROKER_USER}
      - RABBITMQ_DEFAULT_PASS=${BROKER_PASSWORD}
    ports:
      - "${BROKER_UI_PORT}:${BROKER_UI_PORT}"
    expose:
      - "${BROKER_PORT}"
    restart: on-failure
  # Async Task Queue
  queue:
    container_name: celery_worker_local
    image: web_local
    command: sh -c "watchmedo auto-restart -d . -p '*.py' -R -- celery -A config worker -E --loglevel=info"
    volumes:
      - ./web:${WEB}
      - ./environment:${ENV}
      - ./static:${STATIC}
    environment:
      - MODULE_NAME=${MODULE_NAME}
      - VARIABLE_NAME=${VARIABLE_NAME}
      - GUNICORN_CONFIG=${GUNICORN_CONFIG}
      - SETTINGS_MODULE=${SETTINGS_MODULE}
    restart: on-failure
    depends_on:
      - web
  # Async scheduler
  scheduler:
    container_name: celery_beat_local
    image: web_local
    command: sh -c "watchmedo auto-restart -d . -p '*.py' -R -- celery -A config beat --loglevel=info"
    volumes:
      - ./web:${WEB}
      - ./environment:${ENV}
      - ./static:${STATIC}
    environment:
      - MODULE_NAME=${MODULE_NAME}
      - VARIABLE_NAME=${VARIABLE_NAME}
      - GUNICORN_CONFIG=${GUNICORN_CONFIG}
      - SETTINGS_MODULE=${SETTINGS_MODULE}
    restart: on-failure
    depends_on:
      - web
