version : '3'
services:
  mongo:
    container_name: mongo_dev
    image: mongo:5.0.6
    restart: on-failure
    ports:
      - "${DB_PORT}:${DB_PORT}"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${DB_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${DB_PASSWORD}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${DB_HOST}:${DB_PORT}"]
      interval: 1m
      timeout: 10s
      retries: 5

#  mongo-seed:
#    build:
#      context: ./mongo
#      dockerfile : Dockerfile-dev
#      args:
#        DB_NAME: ${DB_NAME}
#    depends_on:
#      - mongo

  web:
    container_name: web_dev
    build:
      context: .
      dockerfile : web/Dockerfile-dev
      args:
        BASE: ${BASE}
        WEB: ${WEB}
        STATIC: ${STATIC}
        WEB_PORT: ${WEB_PORT}
    command: sh -c "python manage.py dev makemigrations &&
                    python manage.py dev migrate &&
                    python manage.py dev collectstatic --no-input &&
                    bash ./config/start.sh"
    restart: on-failure
    volumes:
      - ./web:${WEB}
      - ./environment:${ENV}
    ports:
      - "${WEB_PORT}:${WEB_PORT}"
    environment:
      - MODULE_NAME=${MODULE_NAME}
      - VARIABLE_NAME=${VARIABLE_NAME}
      - GUNICORN_CONFIG=${GUNICORN_CONF}
      - SETTINGS_MODULE=${SETTINGS_MODULE}
    depends_on:
      - mongo
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://${WEB_HOST}:${WEB_PORT}" ]
      interval: 1m
      timeout: 10s
      retries: 5

  nginx:
    container_name: nginx_dev
    image: nginx:stable
    restart: on-failure
    volumes:
      - ./nginx:/etc/nginx/templates
    environment:
      - WEB_HOST=${WEB_HOST}
      - WEB_DOCKERNAME=${WEB_DOCKERNAME}
      - WEB_PORT=${WEB_PORT}
      - AWS_STATIC_LOCATION=${AWS_STATIC_LOCATION}
      - AWS_MEDIA_LOCATION=${AWS_MEDIA_LOCATION}
      - AWS_S3_URL=${AWS_S3_URL}
    ports:
      - "80:80" # http
      - "443:443" # https
    depends_on:
      - web
